

1. Practice using fstream and std::ios::out access flag
{

#include <fstream>
#include <iostream>
#include <string>

int main()
{
	std::fstream file;
	file.open("D:\\example.txt", std::ios::out);
	file << "abcdef";

	return 0;
	
}

}

2. Practice using std::ios::app access flag
{

#include <iostream>
#include <fstream>

int main()
{
	
	std::fstream file;
	
	
	file.open("D:\\12-2.txt", std::ios::out);
	file << "The first line\n";
	file << "The second line\n";
	file.close();
	
	
	file.open("D:\\12-2.txt", std::ios::app);
	file << "Added third line\n";
	file << "Added fourth line.\n";
	file.close();
	
	std::cout << "Process completed.\n";
	
	return 0;
}

}

3.4. Format of file stream object, already did this in previous practice

{

#include <iostream>
#include <fstream>
#include <string>

bool open_check(std::string path);

int main()
{
	std::fstream file;
	std::string path = "D:\\example.txt";
	bool result; 

	
	result = open_check(path);

	
	if (result)
		std::cout << "Open successful.\n";
	else
		std::cout << "Open unsuccessdul.\n";

	return 0;
}


bool open_check(std::string path)
{
	std::fstream file;
	file.open(path, std::ios::in);

	if (file)
	{
		file.close();
		return true;
	}

	else
	{
		file.close();
		return false;
	}
}

}

5. Demonstrate how file stream objects may be passed as argument to functions
{

#include <iostream>
#include <fstream>
#include <string>

void num_writer(std::fstream &file);
void string_writer(std::fstream &file);

int main()
{
	
	std::fstream file;
	file.open("D:\\12-5.txt", std::ios::out);
	
	
	num_writer(file);
	
	
	string_writer(file);
	
	
	std::cout << "Process complete.\n";
	
	return 0;
}

void num_writer(std::fstream &file)
{
	int num;
	std::cout << "Please input a number: ";
	std::cin >> num;
	std::cin.ignore(); 
	file << num << "\n";
}

void string_writer(std::fstream &file)
{
	std::string str;
	std::cout << "Please input a string: ";
	getline(std::cin, str);
	
	file << str << "\n";
}


}

6. Practice error state bits test member function to check the status of flags
{

#include <iostream>
#include <fstream>

void show_state(std::fstream &file);

int main()
{
	std::fstream file;
	std::cout << "After creating the fstream object:\n";
	show_state(file);
	
	file.open("D:\\12-6.txt", std::ios::out);
	std::cout << "\n\nAfter openning the file\n";
	show_state(file);
	
	file << 10;
	std::cout << "\n\nAfter storing a integer value of 10 into the file:\n";
	show_state(file);
	
	file.close();
	std::cout << "\n\nAfter closing the file.\n";
	show_state(file);
	
	file.open("D:\\12-6.txt", std::ios::in);
	std::cout << "\n\nAfter reopen for input:\n";
	show_state(file);
	
	int num;
	file >> num;
	std::cout << "\n\nAfter first attempt of reading:\n";
	show_state(file);
	
	file >> num;
	std::cout << "\n\nAfter second attempt of reading:\n";
	show_state(file);
	
	file.clear();
	std::cout << "\n\nAfter clearing bad bit flag:\n";
	show_state(file);
	
	file << "123";
	std::cout << "\n\nAfter invalid operation:\n";
	show_state(file);

	file.close();
	return 0;

}

void show_state(std::fstream &file)
{
	
	
	if (file.eof())
		std::cout << "End of an input stream is encountered\n";
	else
		std::cout << "End of an input stream is not encountered\n";
	
	if (file.fail())
		std::cout << "An attempted operation has failed\n";
	else
		std::cout << "No attempted operation has failed\n";
	
	if (file.bad())
		std::cout << "An invalid operation has been attempted\n";
	else
		std::cout << "No invalid operation has been attempted\n";
	
	if (file.good())
		std::cout << "The stream is in good condition.\n";
	else
		std::cout << "The stream is not in good condition.\n";
	file.clear(); 
}

}

7. 8. Getline function. Already did this in previous practice.

9. Getline function that specifies different delimiter
{

#include <iostream>
#include <string>
#include <fstream>

int main()
{
	std::fstream file("D:\\name2.txt", std::ios::in);
	std::string str; 
	if (!file.fail())
	{
		while (getline(file, str, '$'))
			std::cout << str << "\n";
	}
	else
		std::cout << "Error, cannot open file.\n";


	return 0;
}

}

10. use get() member function to replicate a file
{

#include <iostream>
#include <fstream>

int main()
{
	std::fstream file;
	file.open("D:\\Travel Expense Report.txt", std::ios::in);

	char ch; 

			 
	if (file)
	{
		
		file.get(ch);

		
		while (file)
		{
			
			std::cout << ch;
			
			file.get(ch);
		}
	}
	else
		std::cout << "File open failed, please check the path.\n";

	return 0;

}

}

11. use put() member function to add a character to a file
{

#include <iostream>
#include <fstream>

int main()
{
	std::fstream file;
	file.open("D:\\nasme2.txt", std::ios::app);
	char ch = 'E';

	if (file) 
	{
		file.put(ch);
		std::cout << "Insert completed.\n";
	}
	else
		std::cout << "File open failed, please try again.\n";

	return 0;
}

}

12. practice writting a filter program
{

#include <iostream>
#include <cctype>
#include <fstream> 	

int main()
{
	std::fstream file;
	file.open("D:\\Travel Expense Report.txt", std::ios::in);
	std::fstream write;
	write.open("D:\\Travel Expense Report_space inserted and uppercased.txt", std::ios::out);
	
	char ch; 
	while (file)
	{
		file.get(ch);
		ch = toupper(ch); 
		write.put(ch); 
		write.put(' '); 
	}
	
	std::cout << "Transfer completed.\n";
	file.close();
	write.close();
	
	return 0;
}

}

13. practice write and read member function
{

#include <iostream>
#include <fstream>

int main()
{
	
	std::fstream file;
	file.open("D:\\12-13.txt", std::ios::out | std::ios::binary); 

																  
	char ch[] = { 'A', 'B', 'c', 'D', 'e', '\n', 'K' };
	
	file.write(ch, sizeof(ch));
	
	file.close();
	
	file.open("D:\\12-13.txt", std::ios::in | std::ios::binary);
	
	char ch2[sizeof(ch) / sizeof(char)];
	
	file.read(ch2, sizeof(ch2));
	
	for (int i = 0; i<sizeof(ch) / sizeof(char); i++)
	{
		std::cout << ch[i] << "  " << ch2[i] << "\n";
	}
	return 0;

}

}

14. continue to practice write and read member function (write and read an array)
{

#include <iostream>
#include <fstream>

int main()
{
	
	std::fstream file;
	file.open("D:\\example.txt", std::ios::out | std::ios::binary);

	
	double num[5] = { 2.1, 3.4, 5.6, 1.2, 9.4 };
	file.write(reinterpret_cast<char *>(num), sizeof(num));

	
	file.close();

	
	file.open("D:\\example.txt", std::ios::in | std::ios::binary);

	
	double num2[5];	
	file.read(reinterpret_cast<char *>(num2), sizeof(num2));

	
	std::cout << "The number array is: ";
	for (int i = 0; i < 5; i++)
	{
		std::cout << num2[i] << " ";
	}
	std::cout << "\n";

	return 0;
}

}

15. Creating records with structures
{

#include <iostream>
#include <fstream>

struct Person_info
{
	char name[21];
	char gender;
};

int main()
{
	
	std::fstream file;
	file.open("D:\\12-15.dat", std::ios::out | std::ios::binary);

	
	char choice;
	do
	{
		Person_info person;
		std::cout << "What is the person's name: ";
		std::cin.getline(person.name, sizeof(person.name));
		std::cout << "What is the person's gender: (M/F)";
		std::cin >> person.gender;

		
		file.write(reinterpret_cast<char *>(&person), sizeof(person));

		
		std::cout << "Do you want to save another record? (y/n): ";
		std::cin >> choice;
		std::cin.ignore(); 
	} while (choice != 'n');

	std::cout << "Thank you, data has been recorded\n";

	file.close();

	return 0;
}

}

16. Read records created by structures
{

#include <iostream>
#include <fstream>
#include <string>

struct Person_info
{
	char name[21];
	char gender;
};

int main()
{
	
	std::fstream file;
	file.open("D:\\12-15.dat", std::ios::in | std::ios::binary);

	
	std::string path;
	while (file.fail()) 
	{
		std::cout << "File open failed, please check your path and input again: ";
		getline(std::cin, path);
		file.clear(); 
		file.open(path, std::ios::in | std::ios::binary);
	}

	
	Person_info person;

	
	int counter = 1; 
	while (!file.eof()) 
	{
		file.read(reinterpret_cast<char *>(&person), sizeof(person)); 
																	  
		std::cout << "Record " << counter++ << "\n\tName: " << person.name << "\n\tGender: " << person.gender << "\n\n";
	}

	file.close();

	return 0;
}

}

17. Practice using seekg
{

#include <iostream>
#include <fstream>

void show_state(std::fstream &file);

int main()
{
	
	std::fstream file;
	file.open("D:\\letters.txt", std::ios::in);

	
	char choice;
	do
	{
		int position;
		char letter;
		std::cout << "Which character you want to read: ";
		std::cin >> position;

		
		file.clear(); 
		file.seekg(position - 1, std::ios::beg);
		
		show_state(file);

		
		file >> letter;
		
		std::cout << "Letter stored there is: " << letter << "\n";

		
		std::cout << "Would you want to test another letter? y/n: ";
		std::cin >> choice;
	} while (choice != 'n');

	std::cout << "You quitted.\n";

	return 0;
}

void show_state(std::fstream &file)
{
	std::cout << "\n\nTest result:\n";
	
	if (file.eof())
		std::cout << "End of an input stream is encountered\n";
	else
		std::cout << "End of an input stream is not encountered\n";
	
	if (file.fail())
		std::cout << "An attempted operation has failed\n";
	else
		std::cout << "No attempted operation has failed\n";
	
	if (file.bad())
		std::cout << "An invalid operation has been attempted\n";
	else
		std::cout << "No invalid operation has been attempted\n";
	
	if (file.good())
		std::cout << "The stream is in good condition.\n";
	else
		std::cout << "The stream is not in good condition.\n";

}

}

18. seekg used to seek structured data
{

#include <iostream>
#include <fstream>

struct Person_info
{
	char name[21];
	char gender;
};

int main()
{
	
	std::fstream file;
	file.open("D:\\12-15.dat", std::ios::in | std::ios::binary);
	
	
	Person_info person;
	
	
	int position;
	std::cout << "Which record to view: ";
	std::cin >> position;
	
	
	file.seekg((position-1)*sizeof(person), std::ios::beg);
	
	
	file.clear();
	file.read(reinterpret_cast<char *>(&person), sizeof(person));
	
	
	std::cout << "\nName: " << person.name << "\n"
	<< "Gender: " << person.gender << "\n";
	
	return 0;
}


}

19. practice using tellg member function to find out the size of the file
{

#include <iostream>
#include <fstream>

int main()
{
	
	std::fstream file;
	file.open("D:\\Travel Expense Report_space inserted and uppercased.txt", std::ios::in);

	
	file.seekg(0, std::ios::end);
	
	long long size;
	size = file.tellg();
	
	std::cout << "The file has a size of " << size << " bytes\n";

	return 0;
}

}


20. practice using binary mode to save structure variable to file 
{

#include <iostream>
#include <fstream>

const int NUM = 5;


struct Item
{
	char description[100];
	int stock;
	double price;
};


void strcpy2(char *destination, const char *source);

int main()
{
	
	std::fstream file;
	file.open("D:\\12-20.dat", std::ios::out | std::ios::binary);

	
	Item inventory[NUM];
	for (int i = 0; i<NUM; i++)
	{
		strcpy2(inventory[i].description, "None"); 
		inventory[i].stock = 0; 
		inventory[i].price = 0.0; 
	}

	
	file.write(reinterpret_cast<char *>(inventory), sizeof(inventory));

	
	file.close();

	
	std::cout << "The process has been completed.\n";

	return 0;
}


void strcpy2(char *destination, const char *source)
{
	int i = 0;
	while (source[i] != '\0')
		destination[i] = source[i++];
	destination[i] = '\0';
}

}

21. Display contents of the file created in 20
{

#include <iostream>
#include <fstream>


struct Item
{
	char description[100];
	int stock;
	double price;
};


void display(Item record);

int main()
{
	
	std::fstream file;
	file.open("D:\\12-20.dat", std::ios::in | std::ios::binary);
	
	
	Item record; 
	while (!file.eof()) 
	{
		file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
		display(record); 
	}
	
	
	file.close();
	
	return 0;
}


void display(Item record)
{
	std::cout << "\n";
	std::cout << "Description: " << record.description << "\n";
	std::cout << "Stock: " << record.stock << "\n";
	std::cout << "Price: $" << record.price << "\n";
}

}

22. Practice openning a file with both input and output mode, allows the user to change the content of the specified record 
{

#include <iostream>
#include <fstream>


struct Item
{
	char description[100];
	int stock;
	double price;
};


void display(Item record);


void modify_record(Item &record);


void strcpy2(char *destination, const char *source);

int main()
{
	
	std::fstream file;


	
	char repeat; 
	const int size = sizeof(Item); 
	int choice;
	Item record; 
	Item record2;

	do
	{
		
		file.open("D:\\12-20.dat", std::ios::binary | std::ios::in | std::ios::out);
		
		for (int i = 0; i<5; i++)
		{
			std::cout << "\nNo. " << i + 1;
			file.read(reinterpret_cast<char *>(&record), size);
			display(record);
		}
		file.clear(); 

					  
		std::cout << "Please input the record to change: ";
		std::cin >> choice;
		std::cin.ignore(); 
		choice--; 

				  
				  
		file.seekg(choice*size, std::ios::beg);
		
		file.read(reinterpret_cast<char *>(&record), size);

		
		modify_record(record);

		
		
		file.seekp(-size, std::ios::cur);
		
		
		file.write(reinterpret_cast<char *>(&record), size);

		
		std::cout << "Do you want to modify another record: (y/n)";
		std::cin >> repeat;
		std::cin.ignore();

		
		file.close();

	} while (repeat != 'N' && repeat != 'n');

	
	std::cout << "\n\nFinal record:";
	
	file.open("D:\\12-20.dat", std::ios::in);
	
	for (int i = 0; i<5; i++)
	{
		std::cout << "\nNo. " << i + 1;
		file.read(reinterpret_cast<char *>(&record), size);
		display(record);
	}

	
	file.close();

	return 0;
}


void display(Item record)
{
	std::cout << "\n";
	std::cout << "Description: " << record.description << "\n";
	std::cout << "Stock: " << record.stock << "\n";
	std::cout << "Price: $" << record.price << "\n";
}


void modify_record(Item &record)
{
	char descript[100];
	std::cout << "Please input the description: ";
	std::cin.getline(descript, 100); 
	strcpy2(record.description, descript); 

	std::cout << "Please input the stock number: ";
	std::cin >> record.stock;

	std::cout << "Please input the price: ";
	std::cin >> record.price;

	std::cin.ignore(); 
	std::cout << "Modify complete.\n";
}


void strcpy2(char *destination, const char *source)
{
	int i = 0;
	while (source[i] != '\0')
		destination[i] = source[i++];
	destination[i] = '\0';
}



}

Case study: High Adventure Travel Agency
{

1) extra printing check
{

#include <iostream>
#include <fstream>

int main()
{
	std::fstream file("D:\\test.txt", std::ios::in | std::ios::binary);

	char transfer;
	int counter = 0;

	while (!file.eof())
	{
		file.read(&transfer, sizeof(transfer));
		counter++;
		if (!file.eof())
			std::cout << "Time of reading: " << counter << " Reading content: " << transfer << " File eof():  " << file.eof() << "\n";
		
	}

	return 0;
}

}

2) Code
{

#include <vector>
#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>


const int BASE_DEVIL = 350, BASE_SCUBA = 1000, BASE_SKY = 400, BASE_BARRON = 700;
const int INSTRUCTION_CLIMBING = 100, INSTRUCTION_SCUBA = 100;
const int LODGING_WILD = 65, LODGING_INN = 120;
const int EQUIPMENT_RENTAL = 40;
const int DAY_DEVIL = 3, DAY_BARRON = 8, DAY_SKY = 4;
const double DISCOUNT_RATE_BASE = 0.1, DISCOUNT_NUM = 5;
const std::string PATH = "D:\\High Adventure Reservation File.dat"; 

																	
struct Package_1 
{
	int num; 
	int num_instruction; 
	int num_equipment; 
	double charge_base; 
	double discount; 
	double charge_instruction; 
	double charge_equipment; 
	double charge_total; 
	double deposit; 
};

struct Package_2 
{
	int num; 
	int num_instruction; 
	double charge_base; 
	double discount; 
	double charge_instruction; 
	double charge_total; 
	double deposit; 
};

struct Package_3 
{
	int num; 
	int num_wild; 
	int num_inn; 
	double charge_base; 
	double discount; 
	double charge_wild; 
	double charge_inn; 
	double charge_total; 
	double deposit; 
};

struct Package_4 
{
	int num; 
	int num_equipment; 
	double charge_base; 
	double discount; 
	double charge_equipment; 
	double charge_total; 
	double deposit; 
};

struct Sales 
{
	double total; 
	double total_devil; 
	double total_scuba;
	double total_sky;
	double total_barron;
	double total_discount; 
	int devil_num; 
	int scuba_num;
	int sky_num;
	int barron_num;
};


union Package
{
	Package_1 devil;
	Package_2 scuba;
	Package_3 sky;
	Package_4 barron;
};



struct Purchase
{
	int pack_num;
	Package pack;
};


void show_menu(char &selection);
void devil_buy();
void devil_print(const Purchase &purch);
void scuba_buy();
void scuba_print(const Purchase &purch);
void sky_buy();
void sky_print(const Purchase &purch);
void barron_buy();
void barron_print(const Purchase &purch);
void display_reservation();
void result_analysis(); 

int main()
{
	char selection; 

	do
	{
		show_menu(selection); 

		switch (selection)
		{
		case '1': devil_buy(); break;
		case '2': scuba_buy(); break;
		case '3': sky_buy(); break;
		case '4': barron_buy(); break;
		case '5': display_reservation(); break;
		case '6': break;
		}

		if (selection != '6')
		{
			std::cout << "Purchase complete, press enter to continue.";
			std::cin.get();
		}

	} while (selection != '6');

	std::cout << "You quitted. The program is creating analysis report...\n";

	
	result_analysis();

	std::cout << "The report has been created.\n\n";

	return 0;

}

void show_menu(char &selection)
{
	std::cout << "Welcome to the package selecting program.\n";
	std::cout << "\nPlease select one term above (1~5):\n";
	std::cout << "1) Devil's Courthouse Adventure Weekend\n";
	std::cout << "2) Scuba Bahama\n";
	std::cout << "3) Sky Dive Colorado\n";
	std::cout << "4) Barron Cliff Spelunk\n";
	std::cout << "5) Show Reservation file\n";
	std::cout << "6) Exit\n";
	std::cin >> selection;
	while (selection != '1' && selection != '2' && selection != '3' && selection != '4' && selection != '5' && selection != '6')
	{
		std::cout << "Invalid input! Please input 1-6: ";
		std::cin >> selection;
	}
}


void devil_buy()
{
	Purchase purch; 
	purch.pack_num = 1; 

						
	std::cout << "How many people in the party: ";
	std::cin >> purch.pack.devil.num;
	while (purch.pack.devil.num <= 0)
	{
		std::cout << "Invalid input, please input again: ";
		std::cin >> purch.pack.devil.num;
	}

	
	purch.pack.devil.charge_base = purch.pack.devil.num * BASE_DEVIL;
	if (purch.pack.devil.num >= DISCOUNT_NUM)
		purch.pack.devil.discount = DISCOUNT_RATE_BASE * purch.pack.devil.charge_base;
	else
		purch.pack.devil.discount = 0;

	
	std::cout << "How many people need instruction? ";
	std::cin >> purch.pack.devil.num_instruction;
	while (purch.pack.devil.num_instruction<0 || purch.pack.devil.num_instruction>purch.pack.devil.num)
	{
		std::cout << "Invalid input. Please input a number between 0 and " << purch.pack.devil.num << std::endl;
		std::cin >> purch.pack.devil.num_instruction;
	}
	purch.pack.devil.charge_instruction = purch.pack.devil.num_instruction*INSTRUCTION_CLIMBING;

	
	std::cout << "How many people need equipments? ";
	std::cin >> purch.pack.devil.num_equipment;
	while (purch.pack.devil.num_equipment<0 || purch.pack.devil.num_equipment>purch.pack.devil.num)
	{
		std::cout << "Invalid input. Please input a number between 0 and " << purch.pack.devil.num << std::endl;
		std::cin >> purch.pack.devil.num_equipment;
	}
	purch.pack.devil.charge_equipment = purch.pack.devil.num_equipment*EQUIPMENT_RENTAL*DAY_DEVIL;

	
	std::cin.ignore();

	
	purch.pack.devil.charge_total = purch.pack.devil.charge_base + purch.pack.devil.charge_equipment + purch.pack.devil.charge_instruction - purch.pack.devil.discount;
	purch.pack.devil.deposit = purch.pack.devil.charge_total / 2;

	
	devil_print(purch);

	
	std::fstream file;
	file.open(PATH, std::ios::app | std::ios::binary);
	file.write(reinterpret_cast<char *>(&purch), sizeof(purch));
	file.close();

}


void devil_print(const Purchase &purch)
{
	static int counter = 0; 
	counter++; 
	std::string counter_str = std::to_string(counter); 
	std::string path = "D:\\Devil's Courthouse Adventure Weekend_report_";
	path.append(counter_str); 
	path.append(".txt"); 

						 
	std::ofstream cout;
	cout.open(path);

	
	cout << std::setprecision(2) << std::fixed;
	cout << std::setw(45) << "************************************\n"
		<< std::setw(44) << "** High Adventure Travel Agency **\n"
		<< std::setw(45) << "------------------------------------\n"
		<< std::setw(45) << "Devil's Courthouse Adventure Weekend\n"
		<< std::setw(46) << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
		<< "Package Description\n"
		<< "---------------------\n"
		<< "An action-packed three-day weekend spent camping,\n"
		<< "rock climbing, and rapelling at Devil's Courthouse,\n"
		<< "North Carolina. This getaway is for novices and \n"
		<< "experts alike. Optional climbing instruction is\n"
		<< "available to beginners at a low price. Camping\n"
		<< "equipment rental is also available.\n\n"
		<< "Package Details:\n"
		<< "-------------------------------------------------------\n";
	cout << std::left << std::setw(37) << "Number in Party" << std::setw(2) << " " << std::right << std::setw(9) << purch.pack.devil.num << std::endl;
	cout << std::left << std::setw(37) << "Base Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.devil.charge_base << std::endl;
	cout << std::left << std::setw(37) << "Instruction Cost" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.devil.charge_instruction << std::endl;
	cout << std::left << std::setw(37) << "Equipment Rental" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.devil.charge_equipment << std::endl;
	cout << std::left << std::setw(37) << "Discount" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.devil.discount << std::endl;
	cout << std::left << std::setw(37) << "Total Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.devil.charge_total << std::endl;
	cout << std::left << std::setw(37) << "Required Deposit" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.devil.deposit << std::endl;
	cout << "-------------------------------------------------------\n";

	
	cout.close();

	
	std::cout << "The purchase report has been created, index: " << counter << "\n";
}


void scuba_buy()
{
	Purchase purch; 
	purch.pack_num = 2; 

						
	std::cout << "How many people in the party: ";
	std::cin >> purch.pack.scuba.num;
	while (purch.pack.devil.num <= 0)
	{
		std::cout << "Invalid input, please input again: ";
		std::cin >> purch.pack.devil.num;
	}

	
	purch.pack.scuba.charge_base = purch.pack.scuba.num * BASE_SCUBA;
	if (purch.pack.scuba.num >= DISCOUNT_NUM)
		purch.pack.scuba.discount = DISCOUNT_RATE_BASE * purch.pack.scuba.charge_base;
	else
		purch.pack.scuba.discount = 0;

	
	std::cout << "How many people need instruction? ";
	std::cin >> purch.pack.scuba.num_instruction;
	while (purch.pack.scuba.num_instruction<0 || purch.pack.scuba.num_instruction > purch.pack.scuba.num)
	{
		std::cout << "Invalid input. Please input a number between 0 and " << purch.pack.scuba.num << std::endl;
		std::cin >> purch.pack.scuba.num_instruction;
	}
	purch.pack.scuba.charge_instruction = purch.pack.scuba.num_instruction*INSTRUCTION_SCUBA;

	
	std::cin.ignore();

	
	purch.pack.scuba.charge_total = purch.pack.scuba.charge_base + purch.pack.scuba.charge_instruction - purch.pack.scuba.discount;
	purch.pack.scuba.deposit = purch.pack.scuba.charge_total / 2;

	
	scuba_print(purch);

	
	std::fstream file;
	file.open(PATH, std::ios::app | std::ios::binary);
	file.write(reinterpret_cast<char *>(&purch), sizeof(purch));
	file.close();

}


void scuba_print(const Purchase &purch)
{
	static int counter = 0; 
	counter++; 
	std::string counter_str = std::to_string(counter); 
	std::string path = "D:\\Scuba Bahama_report_";
	path.append(counter_str); 
	path.append(".txt"); 

						 
	std::ofstream cout;
	cout.open(path);

	
	cout << std::setprecision(2) << std::fixed;
	cout << std::setw(45) << "************************************\n"
		<< std::setw(44) << "** High Adventure Travel Agency **\n"
		<< std::setw(45) << "------------------------------------\n"
		<< std::setw(35) << "***Scuba Bahama***\n"
		<< std::setw(46) << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
		<< "Package Description\n"
		<< "---------------------\n"
		<< "A week-long cruise to the Bahamas with three days of \n"
		<< "scuba diving. Those with prior experience may dive \n"
		<< "right in, while beginners should choose to take optional, \n"
		<< "but very affordable lessons.\n\n"
		<< "Package Details:\n"
		<< "-------------------------------------------------------\n";
	cout << std::left << std::setw(37) << "Number in Party" << std::setw(2) << " " << std::right << std::setw(9) << purch.pack.scuba.num << std::endl;
	cout << std::left << std::setw(37) << "Base Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.scuba.charge_base << std::endl;
	cout << std::left << std::setw(37) << "Instruction Cost" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.scuba.charge_instruction << std::endl;
	cout << std::left << std::setw(37) << "Discount" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.scuba.discount << std::endl;
	cout << std::left << std::setw(37) << "Total Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.scuba.charge_total << std::endl;
	cout << std::left << std::setw(37) << "Required Deposit" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.scuba.deposit << std::endl;
	cout << "-------------------------------------------------------\n";

	
	std::cout << "The purchase report has been created, index: " << counter << "\n";

	
	cout.close();
}


void sky_buy()
{
	Purchase purch; 
	purch.pack_num = 3; 

						
	std::cout << "How many people in the party: ";
	std::cin >> purch.pack.sky.num;
	while (purch.pack.sky.num <= 0)
	{
		std::cout << "Invalid input, please input again: ";
		std::cin >> purch.pack.sky.num;
	}

	
	purch.pack.sky.charge_base = purch.pack.sky.num * BASE_SKY;
	if (purch.pack.sky.num >= DISCOUNT_NUM)
		purch.pack.sky.discount = DISCOUNT_RATE_BASE * purch.pack.sky.charge_base;
	else
		purch.pack.sky.discount = 0;

	
	std::cout << "How many people need a wilderness lodge: ";
	std::cin >> purch.pack.sky.num_wild;
	while (purch.pack.sky.num_wild<0 || purch.pack.sky.num_wild>purch.pack.sky.num)
	{
		std::cout << "Invalid input. Please input a number between 0 and " << purch.pack.sky.num << std::endl;
		std::cin >> purch.pack.sky.num_wild;
	}
	purch.pack.sky.charge_wild = purch.pack.sky.num_wild*LODGING_WILD*DAY_SKY;

	
	std::cout << "How many people need a luxury inn: ";
	std::cin >> purch.pack.sky.num_inn;
	while (purch.pack.sky.num_inn<0 || purch.pack.sky.num_inn>purch.pack.sky.num)
	{
		std::cout << "Invalid input. Please input a number between 0 and " << purch.pack.sky.num << std::endl;
		std::cin >> purch.pack.sky.num_inn;
	}
	purch.pack.sky.charge_inn = purch.pack.sky.num_inn*LODGING_INN*DAY_SKY;

	
	std::cin.ignore();

	
	purch.pack.sky.charge_total = purch.pack.sky.charge_base + purch.pack.sky.charge_wild + purch.pack.sky.charge_inn - purch.pack.sky.discount;
	purch.pack.sky.deposit = purch.pack.sky.charge_total / 2;

	
	sky_print(purch);

	
	std::fstream file;
	file.open(PATH, std::ios::app | std::ios::binary);
	file.write(reinterpret_cast<char *>(&purch), sizeof(purch));
	file.close();

}


void sky_print(const Purchase &purch)
{
	static int counter = 0; 
	counter++; 
	std::string counter_str = std::to_string(counter); 
	std::string path = "D:\\Sky Dive Colorado_report_";
	path.append(counter_str); 
	path.append(".txt"); 

						 
	std::ofstream cout;
	cout.open(path);

	
	cout << std::setprecision(2) << std::fixed;
	cout << std::setw(45) << "************************************\n"
		<< std::setw(44) << "** High Adventure Travel Agency **\n"
		<< std::setw(45) << "------------------------------------\n"
		<< std::setw(34) << "Sky Dive Colorado\n"
		<< std::setw(46) << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
		<< "Package Description\n"
		<< "---------------------\n"
		<< "Four thrilling days with expert sky-diving instructors \n"
		<< "in Colorado Springs, Colorado. For lodging, you may  \n"
		<< "choose either the Wilderness Lodge or the Luxury Inn. \n"
		<< "(Instruction is included for all members of the party.)\n\n"
		<< "Package Details:\n"
		<< "-------------------------------------------------------\n";
	cout << std::left << std::setw(37) << "Number in Party" << std::setw(2) << " " << std::right << std::setw(9) << purch.pack.sky.num << std::endl;
	cout << std::left << std::setw(37) << "Base Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.sky.charge_base << std::endl;
	cout << std::left << std::setw(37) << "Lodging at Wilderness Lodge" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.sky.charge_wild << std::endl;
	cout << std::left << std::setw(37) << "Lodging at Luxury inn" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.sky.charge_inn << std::endl;
	cout << std::left << std::setw(37) << "Discount" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.sky.discount << std::endl;
	cout << std::left << std::setw(37) << "Total Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.sky.charge_total << std::endl;
	cout << std::left << std::setw(37) << "Required Deposit" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.sky.deposit << std::endl;
	cout << "-------------------------------------------------------\n";

	
	cout.close();

	
	std::cout << "The purchase report has been created, index: " << counter << "\n";

}


void barron_buy()
{
	Purchase purch; 
	purch.pack_num = 4; 

						
	std::cout << "How many people in the party: ";
	std::cin >> purch.pack.barron.num;
	while (purch.pack.barron.num <= 0)
	{
		std::cout << "Invalid input, please input again: ";
		std::cin >> purch.pack.barron.num;
	}

	
	purch.pack.barron.charge_base = purch.pack.barron.num * BASE_BARRON;
	if (purch.pack.barron.num >= DISCOUNT_NUM)
		purch.pack.barron.discount = DISCOUNT_RATE_BASE * purch.pack.barron.charge_base;
	else
		purch.pack.barron.discount = 0;

	
	std::cout << "How many people need equipments? ";
	std::cin >> purch.pack.barron.num_equipment;
	while (purch.pack.barron.num_equipment<0 || purch.pack.barron.num_equipment>purch.pack.barron.num)
	{
		std::cout << "Invalid input. Please input a number between 0 and " << purch.pack.barron.num << std::endl;
		std::cin >> purch.pack.barron.num_equipment;
	}
	purch.pack.barron.charge_equipment = purch.pack.barron.num_equipment*EQUIPMENT_RENTAL*DAY_BARRON;

	
	std::cin.ignore();

	
	purch.pack.barron.charge_total = purch.pack.barron.charge_base + purch.pack.barron.charge_equipment - purch.pack.barron.discount;
	purch.pack.barron.deposit = purch.pack.barron.charge_total / 2;

	
	barron_print(purch);

	
	std::fstream file;
	file.open(PATH, std::ios::app | std::ios::binary);
	file.write(reinterpret_cast<char *>(&purch), sizeof(purch));
	file.close();

}

void barron_print(const Purchase &purch)
{
	static int counter = 0; 
	counter++; 
	std::string counter_str = std::to_string(counter); 
	std::string path = "D:\\Barron Cliff Spelunk_report_";
	path.append(counter_str); 
	path.append(".txt"); 

						 
	std::ofstream cout;
	cout.open(path);

	
	cout << std::setprecision(2) << std::fixed;
	cout << std::setw(45) << "************************************\n"
		<< std::setw(44) << "** High Adventure Travel Agency **\n"
		<< std::setw(45) << "------------------------------------\n"
		<< std::setw(35) << "Barron Cliff Spelunk\n"
		<< std::setw(46) << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
		<< "Package Description\n"
		<< "---------------------\n"
		<< "Eight days spent hiking and exploring caves in the \n"
		<< "Barron Cliff Wilderness Area, Tennessee. Camping \n"
		<< "equipment rental is available.\n\n"
		<< "Package Details:\n"
		<< "-------------------------------------------------------\n";
	cout << std::left << std::setw(37) << "Number in Party" << std::setw(2) << " " << std::right << std::setw(9) << purch.pack.barron.num << std::endl;
	cout << std::left << std::setw(37) << "Base Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.barron.charge_base << std::endl;
	cout << std::left << std::setw(37) << "Equipment Rental" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.barron.charge_equipment << std::endl;
	cout << std::left << std::setw(37) << "Discount" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.barron.discount << std::endl;
	cout << std::left << std::setw(37) << "Total Charges" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.barron.charge_total << std::endl;
	cout << std::left << std::setw(37) << "Required Deposit" << std::setw(2) << "$" << std::right << std::setw(9) << purch.pack.barron.deposit << std::endl;
	cout << "-------------------------------------------------------\n";

	
	cout.close();

	
	std::cout << "The purchase report has been created, index: " << counter << "\n";
}


void display_reservation()
{
	
	std::fstream file;
	file.open(PATH, std::ios::in | std::ios::binary);

	
	Purchase record;
	int counter = 0;
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record));

	while (!file.eof()) 
	{
		counter++;
		std::cout << "Reservation No. " << counter << ":\n";
		switch (record.pack_num)
		{
		case 1:
			std::cout << "Number of people: " << record.pack.devil.num << "\n";
			std::cout << "Basic charge: $" << record.pack.devil.charge_base << "\n";
			std::cout << "Discount: $" << record.pack.devil.discount << "\n";
			std::cout << "People needs equipment: " << record.pack.devil.num_equipment << "\n";
			std::cout << "People needs instruction: " << record.pack.devil.num_instruction << "\n";
			std::cout << "Total charge: $" << record.pack.devil.charge_total << "\n";
			std::cout << "Deposit: $" << record.pack.devil.deposit << "\n";
			break;
		case 2:
			std::cout << "Number of people: " << record.pack.scuba.num << "\n";
			std::cout << "Basic charge: $" << record.pack.scuba.charge_base << "\n";
			std::cout << "Discount: $" << record.pack.scuba.discount << "\n";
			std::cout << "People needs instruction: " << record.pack.scuba.num_instruction << "\n";
			std::cout << "Total charge: $" << record.pack.scuba.charge_total << "\n";
			std::cout << "Deposit: $" << record.pack.scuba.deposit << "\n";
			break;
		case 3:
			std::cout << "Number of people: " << record.pack.sky.num << "\n";
			std::cout << "Basic charge: $" << record.pack.sky.charge_base << "\n";
			std::cout << "Discount: $" << record.pack.sky.discount << "\n";
			std::cout << "Number of people needs wilderness lodge: " << record.pack.sky.num_wild << "\n";
			std::cout << "Number of people needs luxury inn: " << record.pack.sky.num_inn << "\n";
			std::cout << "Total charge: $" << record.pack.sky.charge_total << "\n";
			std::cout << "Deposit: $" << record.pack.sky.deposit << "\n";
			break;
		case 4:
			std::cout << "Number of people: " << record.pack.barron.num << "\n";
			std::cout << "Basic charge: $" << record.pack.barron.charge_base << "\n";
			std::cout << "Discount: $" << record.pack.barron.discount << "\n";
			std::cout << "People needs equipment: " << record.pack.barron.num_equipment << "\n";
			std::cout << "Total charge: $" << record.pack.barron.charge_total << "\n";
			std::cout << "Deposit: $" << record.pack.barron.deposit << "\n";
			break;
		}

		std::cout << "\n\n";

		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}

	
	file.close();

}


void result_analysis()
{
	
	
	std::fstream file;
	file.open(PATH, std::ios::in | std::ios::binary);

	
	Purchase record;

	
	std::ofstream cout;
	cout.open("D:\\Travel Agency Report.txt");

	Sales sale;
	sale.total = 0;
	sale.total_barron = 0;
	sale.total_devil = 0;
	sale.total_discount = 0;
	sale.total_scuba = 0;
	sale.total_sky = 0;
	sale.devil_num = 0;
	sale.scuba_num = 0;
	sale.sky_num = 0;
	sale.barron_num = 0;

	
	while (!file.eof())
	{
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));

		
		if (!file.eof())
		{
			switch (record.pack_num)
			{
			case 1:
				sale.total_devil += record.pack.devil.charge_total;
				sale.devil_num++;
				sale.total += record.pack.devil.charge_total;
				sale.total_discount += record.pack.devil.discount;
				break;
			case 2:
				sale.total_scuba += record.pack.scuba.charge_total;
				sale.scuba_num++;
				sale.total += record.pack.scuba.charge_total;
				sale.total_discount += record.pack.scuba.discount;
				break;
			case 3:
				sale.total_sky += record.pack.sky.charge_total;
				sale.sky_num++;
				sale.total += record.pack.sky.charge_total;
				sale.total_discount += record.pack.sky.discount;
				break;
			case 4:
				sale.total_barron += record.pack.barron.charge_total;
				sale.barron_num++;
				sale.total += record.pack.barron.charge_total;
				sale.total_discount += record.pack.barron.discount;
				break;
			}
		}


	}


	
	cout << std::setprecision(2) << std::fixed;
	int total = sale.devil_num + sale.scuba_num + sale.sky_num + sale.barron_num;
	double total_sale = sale.total_devil + sale.total_scuba + sale.total_sky + sale.total_barron;
	cout << "Total package sold: " << total << std::endl;
	cout << "Total sales: $" << total_sale << std::endl;
	cout << "Devil package sold: " << sale.devil_num << ", percentage: " << static_cast<double>(sale.devil_num) / total << ". Sales from these devil package: $" << sale.total_devil << ". Sales percentage: " << sale.total_devil / total_sale << "\n";
	cout << "Scuba package sold: " << sale.scuba_num << ", percentage: " << static_cast<double>(sale.scuba_num) / total << ". Sales from these scuba package: $" << sale.total_scuba << ". Sales percentage: " << sale.total_scuba / total_sale << "\n";
	cout << "Sky package sold: " << sale.sky_num << ", percentage: " << static_cast<double>(sale.sky_num) / total << ". Sales from these sky package: $" << sale.total_sky << ". Sales percentage: " << sale.total_sky / total_sale << "\n";
	cout << "Barron package sold: " << sale.barron_num << ", percentage: " << static_cast<double>(sale.barron_num) / total << ". Sales from these barron package: $" << sale.total_barron << ". Sales percentage: " << sale.total_barron / total_sale << "\n";
	cout << "Total discount: " << sale.total_discount << ".\n";
	std::cout << "\n";

	
	cout.close();
	file.close();

}


}

}




1. File head program
{

#include <string>
#include <fstream>
#include <iostream>

int main()
{
	std::string path;
	std::cout << "Please input the path of the file: ";
	getline(std::cin, path);
	
	
	std::fstream file(path, std::ios::in);
	while (!file)
	{
		std::cout << "Unable to open the file, please input the path again: ";
		getline(std::cin, path);
		file.open(path, std::ios::in);
	}
	
	
	int counter = 0;
	std::string line;
	
	
	while (getline(file, line) && counter++ < 10)
	{
		std::cout << line << "\n";
	}
	
	
	if (file.eof())
		std::cout << "The entire file has been displayed.\n";
	else
		std::cout << "The header has been displayed.\n";
	
	
	file.close();
	
	return 0;
}

}

2. File display program
{

#include <string>
#include <fstream>
#include <iostream>

const int LINE_NUM = 5;

int main()
{
	std::string path;
	std::cout << "Please input the path of the file: ";
	getline(std::cin, path);
	
	
	std::fstream file(path, std::ios::in);
	while (!file)
	{
		std::cout << "Unable to open the file, please input the path again: ";
		getline(std::cin, path);
		file.open(path, std::ios::in);
	}
	
	
	int counter = 1;
	std::string line;
	
	
	getline(file, line);
	
	while (!file.eof()) 
	{
		std::cout << line << "\n";
		counter++;
		if (counter > LINE_NUM) 
		{
			std::cout << "Display paused, please press enter to continue...";
			std::cin.get();
			std::cout << "\n";
			counter = 1;
			getline(file, line);
			continue;
		}
		getline(file, line); 
	}
	
	std::cout << "The entire file has been displayed.\n";
	
	return 0;
}

}

3. Punch line 
{

#include <iostream>
#include <fstream>
#include <string>

void display_joke(std::fstream &file_joke);
void display_punchline(std::fstream &file_punchline);

int main()
{
	
	std::fstream file_joke("D:\\joke.txt", std::ios::in);
	std::fstream file_punchline("D:\\punchline.txt", std::ios::in);
	
	
	display_joke(file_joke);
	
	
	display_punchline(file_punchline);
	
	
	file_joke.close();
	file_punchline.close();
	
	return 0;
}

void display_joke(std::fstream &file_joke)
{
	std::string line;
	
	while (getline(file_joke, line))
		std::cout << line << "\n";
	
}

void display_punchline(std::fstream &file_punchline)
{
	
	file_punchline.seekg(-1, std::ios::end);
	
	
	char ch;
	do
	{
		file_punchline.get(ch);
		if (ch == '\n')
			break;
		file_punchline.seekg(-2, std::ios::cur); 
	} while (ch != '\n');
	
	
	std::string line;
	getline(file_punchline, line);
	std::cout << line << "\n";
}


}

4. Tail program (The myth of backward)
{

1) about the '\n' and seekg, it seems when the file streamer reads \n, it actually moves two bytes, rather than one. Following code shows the process of reverse printing a file
{

#include <iostream>
#include <fstream>
#include <string>

int main()
{
	
	std::fstream file;

	
	std::string path;
	path = "D:\\P4_long.txt";

	
	file.open(path, std::ios::in);
	if (!file)
	{
		std::cout << "File open failed. Please check the file and restart the program.\n";
		return 0;
	}

	char ch;
	file.seekg(-1, std::ios::end);
	file.get(ch);
	
	do
	{
		std::cout << ch;
		if (ch == '\n')
			file.seekg(-3, std::ios::cur);
		else
			file.seekg(-2, std::ios::cur);
		file.get(ch);
	} while (ch != 'Z');
	

	return 0;
}



}

2) Code
{

#include <iostream>
#include <fstream>
#include <string>

int main()
{
	
	std::fstream file;

	
	std::string path;
	path = "D:\\P4_short.txt";

	
	file.open(path, std::ios::in);
	if (!file) 
	{
		std::cout << "File open failed. Please check the file and restart the program.\n";
		return 0;
	}

	
	file.seekg(-1, std::ios::end); 
	int counter = 0; 
	char ch; 
	int loop_counter = 0;
	do
	{
		file.get(ch); 
		if (ch == '\n')
		{
			counter++; 
			file.seekg(-3, std::ios::cur); 
		}
		else
			file.seekg(-2, std::ios::cur); 
		
	} while (counter < 5 && !file.fail()); 
	if (counter == 5)
		file.seekg(3, std::ios::cur); 
	else
	{
		file.clear();
		file.seekg(0, std::ios::beg);
	}
		
									  

	std::string line; 
	while (getline(file, line))
		std::cout << line << "\n";

	if (counter == 5)
		std::cout << "The last 5 lines are displayed.\n";
	else
		std::cout << "The entire file is displayed.\n";


	file.close(); 

	return 0;
}


}

}

5. Line numbers
{


#include <string>
#include <fstream>
#include <iostream>

const int LINE_NUM = 5;

int main()
{
	std::string path;
	std::cout << "Please input the path of the file: ";
	getline(std::cin, path);

	
	std::fstream file(path, std::ios::in);
	while (!file)
	{
		std::cout << "Unable to open the file, please input the path again: ";
		getline(std::cin, path);
		file.open(path, std::ios::in);
	}

	
	int counter = 1;
	std::string line;

	
	getline(file, line);

	while (!file.eof()) 
	{
		std::cout << counter++ << ": ";
		std::cout << line << "\n";
		getline(file, line); 
	}

	std::cout << "The entire file has been displayed.\n";

	return 0;
}

}

6. String search
{

#include <iostream>
#include <string>
#include <fstream>

void get_info(std::fstream &file, std::string &path, std::string &keyword);

int main()
{	
	
	std::fstream file; 
	std::string path; 
	std::string keyword; 
	get_info(file, path, keyword);
	
	
	std::cout << "Search result:\n";
	int match_counter_total = 0; 
	int match_counter_line; 
	std::string line; 
	getline(file, line); 
	
	while (!file.eof()) 
	{
		match_counter_line = 0; 
		if (line.find(keyword) != -1) 
		{
			std::cout << line << "\n\n"; 
			int position = 0; 
			while (position < line.length()-keyword.length()) 
			{
				position = line.find(keyword, position); 
				if (position != -1) 
				{
					match_counter_line++; 
					position += keyword.length(); 
				}
			}
			
			std::cout << "Matched record in this line: " << match_counter_line << "\n\n"; 
			match_counter_total += match_counter_line; 
		}
		getline(file, line); 
	}
	
	std::cout << "Total matches: " << match_counter_total << "\n";
	
	file.close();
	return 0;
	
	
}

void get_info(std::fstream &file, std::string &path, std::string &keyword)
{
	path = "D:\\P6.txt";
	
	std::cout << "Please input the keyword: ";
	getline(std::cin, keyword);
	
	file.open(path, std::ios::in);
	
}


}

7. Sentence Filter
{

#include <iostream>
#include <fstream>
#include <cctype>

int main()
{
		std::fstream cout("D:\\P7_2.txt", std::ios::out); 
	std::fstream cin("D:\\P7_1.txt", std::ios::in); 

														char ch; 
	cin.get(ch); 
	cout.put(toupper(ch)); 
	cin.get(ch); 

	while (!cin.eof()) 
	{
		if (ch == '.' || ch == '?' || ch == '!') 
		{
			while (!isalpha(ch) && !cin.eof()) 
			{
				std::cout << ch;
				cout.put(ch); 
				cin.get(ch); 
			}

			cout.put(toupper(ch)); 
			cin.get(ch); 
		}
		else
		{
			std::cout << ch;
			cout.put(tolower(ch)); 
			cin.get(ch); 
		}


	}

		cout.close();
	cin.close();
	std::cout << "Process completed.\n";

	return 0;


}

}

8. Array/file functions
{

#include <iostream>
#include <fstream>

void array_to_file(std::string path, int *num, int size);
void file_to_array(std::string path, int *num, int size);

const int SIZE = 10;
int main()
{
	int array1[SIZE] = { 1,2,3,4,5,6,7,8,9,0 };
	int array2[SIZE];
	
	std::string path = "D:\\P8.txt";
	
		array_to_file(path, array1, SIZE);
	
		file_to_array(path, array2, SIZE);
	
		for (int i=0; i<SIZE; i++)
		std::cout << array2[i] << "\n";
	
	return 0;
}

void array_to_file(std::string path, int *num, int size)
{
		std::fstream file(path, std::ios::out | std::ios::binary); 
	for (int i=0; i<size; i++)
		file.write(reinterpret_cast<char *>(&num[i]), sizeof(num)); 
	file.close(); 
}
void file_to_array(std::string path, int *num, int size)
{
		std::fstream file(path, std::ios::in | std::ios::binary); 
	for (int i=0; i<size; i++)
		file.read(reinterpret_cast<char *>(&num[i]), sizeof(num)); 
	file.close(); 
}


}

9. 10. File encryption/decryption filter (gain: "\\" is considered \, one character, not two)
{

#include <iostream>
#include <fstream>
#include <string>

void encrypt(std::string path);
void display(std::string path);
void decrypt(std::string path);

int main()
{
		std::string path = "D:\\P9.txt";

		encrypt(path);

		std::cout << "The original file is:\n";
	display(path);
	std::cout << "The encrypted file is:\n";
	display("D:\\P9_encrypted.txt");

		decrypt("D:\\P9_encrypted.txt");

		std::cout << "The decrypted file is:\n";
	display("D:\\P9_decrypted.txt");

	return 0;
}

void encrypt(std::string path)
{
		std::ifstream cin(path); 
	path.erase(5, 4); 
	path += "_encrypted.txt"; 

	std::ofstream cout(path); 
	char ch; 
	while (cin.get(ch))
		cout.put(static_cast<char>(ch + 10)); 

		cin.close();
	cout.close();
}

void display(std::string path)
{
	
	char ch;
	std::ifstream cin(path);

	while (cin.get(ch))
		std::cout << ch;

	std::cout << "\n";

	cin.close();
}

void decrypt(std::string path)
{
		std::ifstream cin(path); 
	path.erase(5, 14); 
	path += "_decrypted.txt"; 

	std::ofstream cout(path); 
	char ch; 
	while (cin.get(ch))
		cout.put(static_cast<char>(ch - 10)); 

											  	cin.close();
	cout.close();
}

}

11. 12. Corporate sales data output and input
{

1) Trial: the data in structured variable is stored in vicinity
{

#include <iostream>

struct Data
{
	int num1;
	int num2;
};

int main()
{
	Data data = { 1, 2 };
	int *ptr = &data.num1;

	std::cout << "num1 = " << *ptr << "\n";
	ptr++;
	std::cout << "num2 = " << *ptr << "\n";

	return 0;
}

}

2) Code
{

#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>

const int SIZE = 5;


struct Sale_data
{
	char division[SIZE]; 
	int quarter; 
	double sale; 
};


struct Sale_report
{
	double total_qsale_1; 
	double total_qsale_2; 
	double total_qsale_3; 
	double total_qsale_4; 
	int high_quarter; 
	int low_quarter; 
	double high_qsale; 
	double low_qsale; 

	double year_sale_E; 
	double year_sale_W; 
	double year_sale_N; 
	double year_sale_S; 

	double avgq_sale_E; 
	double avgq_sale_W; 
	double avgq_sale_N; 
	double avgq_sale_S; 

	double year_sale; 
};

void get_data(std::fstream &file);
void strcpy2(char *destination, const char *source);
Sale_report analyze(std::fstream &file);
void display(const Sale_report &report);

int main()
{
		std::ofstream create("D:\\P11_sale_file.dat"); 
	create.close();
	std::fstream file("D:\\P11_sale_file.dat", std::ios::out | std::ios::in | std::ios::binary); 

		get_data(file);		

		Sale_report report;
	
	
	report = analyze(file);

		std::cout << report.avgq_sale_E << "\n";
	display(report);

	file.close();
	return 0;

}


void get_data(std::fstream &file)
{
	for (int division = 1; division <= 4; division++) 
	{
		for (int quarter = 1; quarter <= 4; quarter++) 
		{
			std::string div_name; 
			switch (division) 
			{
			case 1: div_name = "East"; break;
			case 2: div_name = "West"; break;
			case 3: div_name = "North"; break;
			case 4: div_name = "South"; break;
			}

						Sale_data sale_figure; 
			strcpy2(sale_figure.division, div_name.c_str()); 

															 			sale_figure.quarter = quarter;

						std::cout << "What is the sales figure for division " << div_name << " in quarter " << quarter << ": ";
			std::cin >> sale_figure.sale;

						file.write(reinterpret_cast<char *>(&sale_figure), sizeof(sale_figure));
		}
	}
}


void strcpy2(char *destination, const char *source)
{
	int i = 0;
	while (source[i] != '\0')
		destination[i] = source[i++];
	destination[i] = '\0';
}


Sale_report analyze(std::fstream &file)
{


		Sale_report report = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

		file.clear();
	file.seekg(0, std::ios::beg);

		Sale_data record; 
	file.read(reinterpret_cast<char *>(&record), sizeof(record)); 

	while (!file.eof()) 
	{
		switch (record.division[0]) 
		{
		case 'E':
			switch (record.quarter) 
			{
			case 1:
				report.total_qsale_1 += record.sale; 
				report.year_sale_E += record.sale; 
				break;
			case 2:
				report.total_qsale_2 += record.sale; 
				report.year_sale_E += record.sale; 
				break;
			case 3:
				report.total_qsale_3 += record.sale; 
				report.year_sale_E += record.sale; 
				break;
			case 4:
				report.total_qsale_4 += record.sale; 
				report.year_sale_E += record.sale; 
				break;
			}
			break;
		case 'W':
			switch (record.quarter) 
			{
			case 1:
				report.total_qsale_1 += record.sale; 
				report.year_sale_W += record.sale; 
				break;
			case 2:
				report.total_qsale_2 += record.sale; 
				report.year_sale_W += record.sale; 
				break;
			case 3:
				report.total_qsale_3 += record.sale; 
				report.year_sale_W += record.sale; 
				break;
			case 4:
				report.total_qsale_4 += record.sale; 
				report.year_sale_W += record.sale; 
				break;
			}
			break;
		case 'N':
			switch (record.quarter) 
			{
			case 1:
				report.total_qsale_1 += record.sale; 
				report.year_sale_N += record.sale; 
				break;
			case 2:
				report.total_qsale_2 += record.sale; 
				report.year_sale_N += record.sale; 
				break;
			case 3:
				report.total_qsale_3 += record.sale; 
				report.year_sale_N += record.sale; 
				break;
			case 4:
				report.total_qsale_4 += record.sale; 
				report.year_sale_N += record.sale; 
				break;
			}
			break;
		case 'S':
			switch (record.quarter) 
			{
			case 1:
				report.total_qsale_1 += record.sale; 
				report.year_sale_S += record.sale; 
				break;
			case 2:
				report.total_qsale_2 += record.sale; 
				report.year_sale_S += record.sale; 
				break;
			case 3:
				report.total_qsale_3 += record.sale; 
				report.year_sale_S += record.sale; 
				break;
			case 4:
				report.total_qsale_4 += record.sale; 
				report.year_sale_S += record.sale; 
				break;
			}
			break;
		}

				file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}

		double qsale[4];
	double *ptr1 = &report.total_qsale_1; 
	for (int i = 0; i<4; i++, ptr1++) 
	{
		qsale[i] = *ptr1;
	}

	
	double high_qsale = qsale[0];
	int high_quarter = 0;
	for (int i = 1; i<4; i++)
		if (high_qsale < qsale[i])
		{
			high_qsale = qsale[i];
			high_quarter = i;
		}
	report.high_quarter = high_quarter;
	report.high_qsale = high_qsale;

	
	double low_qsale = qsale[0];
	int low_quarter = 0;
	for (int i = 1; i<4; i++)
		if (low_qsale > qsale[i])
		{
			low_qsale = qsale[i];
			low_quarter = i;
		}
	report.low_quarter = low_quarter;
	report.low_qsale = low_qsale;

		ptr1 = &report.year_sale_E;
	double *ptr2 = &report.avgq_sale_E;
	for (int i = 0; i<4; i++, ptr1++, ptr2++)
		*ptr2 = *ptr1 / 4;

		ptr1 = &report.year_sale;
	ptr2 = &report.total_qsale_1;
	for (int i = 0; i<4; i++, ptr2++)
		*ptr1 += *ptr2;

		return report;


}


void display(const Sale_report &report)
{
		std::cout << std::setprecision(2) << std::fixed;

		const double *ptr = &report.total_qsale_1;
	for (int i = 0; i<4; i++, ptr++)
	{
		std::cout << "Total corporate sale for quarter " << i + 1 << ": $" << *ptr << "\n";
	}

		std::cout << "Quarter " << report.high_quarter + 1 << " has highest sale: $" << report.high_qsale << "\n";
	std::cout << "Quarter " << report.low_quarter + 1 << " has lowest sale: $" << report.low_qsale << "\n";

		ptr = &report.year_sale_E;
	for (int i = 0; i<4; i++, ptr++)
	{
		std::cout << "\nYearly sale for ";
		switch (i)
		{
		case 0: std::cout << "East division: $" << *ptr << "\n"; break;
		case 1: std::cout << "West division: $" << *ptr << "\n"; break;
		case 2: std::cout << "North division: $" << *ptr << "\n"; break;
		case 3: std::cout << "South division: $" << *ptr << "\n"; break;
		}
	}

		ptr = &report.avgq_sale_E;
	for (int i = 0; i<4; i++, ptr++)
	{
		std::cout << "\nAverage quarterly sale for ";
		switch (i)
		{
		case 0: std::cout << "East division: $" << *ptr << "\n"; break;
		case 1: std::cout << "West division: $" << *ptr << "\n"; break;
		case 2: std::cout << "North division: $" << *ptr << "\n"; break;
		case 3: std::cout << "South division: $" << *ptr << "\n"; break;
		}
	}

		std::cout << "Yearly sale for the corporation: $" << report.year_sale << "\n";

}



}

}

13. 14. Inventory program (date check, date print function added)
{

#include <iostream>
#include <fstream>
#include <cstring>
#include <cctype>

const int DESCRIPTION = 101;
const int DATE_NUM = 11;

struct Inventory_item
{
	char descript[DESCRIPTION];
	int stock;
	double cost_wholesale;
	double cost_retail;
	char date[DATE_NUM];
};

void process_database(std::fstream &file);
void display_menu(char &choice);
void add_record(std::fstream &file);
bool date_check(char *date);
void display(const Inventory_item &record);
void display_record(std::fstream &file);
void display_record_after_date(std::fstream &file);
void modify_record(std::fstream &file);
void show_summary(std::fstream &file);
int date_ch_to_int(char *date_ch);

int main()
{
		std::fstream file;
	
	file.open("D:\\P13-database.dat", std::ios::in);
	if (file.fail()) 
	{
		file.close();
		file.open("D:\\P13-database.dat", std::ios::out);
		file.close();
	}
	
	file.open("D:\\P13-database.dat", std::ios::out | std::ios::in | std::ios::binary);

		process_database(file);
	
	file.close();
	
	return 0;


}

void process_database(std::fstream &file)
{
	char choice; 
	do
	{
		display_menu(choice); 

		switch (choice)
		{
		case '1': 
			add_record(file); break;
		case '2': 
			display_record(file); break;
		case '3': 
			modify_record(file); break;
		case '4': 
			show_summary(file); break;
		case '5': 
			display_record_after_date(file);
		case '6':
			break;
		}
	} while (choice != '6');
	
	std::cout << "Quit successfully.\n";
	
}

void display_menu(char &choice)
{
	std::cout << "Welcome to inventory editing program, please select one term below:\n";
	std::cout << "1) Add new records to the database\n"
		<< "2) Display records in database\n"
		<< "3) Modify records in database\n"
		<< "4) Vieww database summary\n"
		<< "5) Display records added after a certain date\n"
		<< "6) Quit\n";
	std::cin >> choice;
	while (choice < 49 || choice > 54)
	{
		std::cout << "Please input 1 ~ 6: ";
		std::cin >> choice;
	}
	std::cin.ignore(); 

}


void add_record(std::fstream &file)
{
		file.clear(); 
	file.seekp(0, std::ios::end);

		Inventory_item record; 
						   
	std::cout << "Please enter item description (maximum character: 100): ";
	std::cin.getline(record.descript, DESCRIPTION);
	
	std::cout << "Please enter date added to inventory (in mm/dd/yyyy format): ";
	std::cin.getline(record.date, DATE_NUM);
	while (!date_check(record.date)) 
	{
		std::cout << "Invalid date format, please input the date again in mm/dd/yyyy format: ";
		std::cin.getline(record.date, DATE_NUM);
	}

	
	std::cout << "Please input stock number: ";
	std::cin >> record.stock;
	while (record.stock < 0)
	{
		std::cout << "Invalid input, please input number greater than zero: ";
		std::cin >> record.stock;
	}
	
	std::cout << "Please input wholesale cost: ";
	std::cin >> record.cost_wholesale;
	while (record.cost_wholesale < 0)
	{
		std::cout << "Invalid input, please input number greater than zero: ";
		std::cin >> record.cost_wholesale;
	}
	
	std::cout << "Please input retail cost: ";
	std::cin >> record.cost_retail;
	while (record.cost_retail < 0)
	{
		std::cout << "Invalid input, please input number greater than zero: ";
		std::cin >> record.cost_retail;
	}
	
	std::cin.ignore();

		file.write(reinterpret_cast<char *>(&record), sizeof(record));

		std::cout << "Add item complete, press enter to continue...";
	std::cin.get();
	std::cout << "\n\n";
}









bool date_check(char *date)
{
		if (strlen(date) != 10)
		return 0;

		if (date[2] != '/' && date[5] != '/')
		return 0;

		char month_ch[2] = { date[0], date[1] };
	char day_ch[2] = { date[3], date[4] };
	char year_ch[4] = { date[6], date[7], date[8], date[9] };
	int month = atoi(month_ch);
	int day = atoi(day_ch);
	int year = atoi(year_ch);

		switch (month)
	{
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		if (day < 1 || day > 31)
			return 0;
		else
			return 1;
		break;
	case 4:
	case 6:
	case 9:
	case 11:
		if (day < 1 || day > 30)
			return 0;
		else
			return 1;
		break;
	case 2:
		
		bool leap_year; 
		if (year % 4 != 0)
			leap_year = false;
		else if (year % 100 != 0)
			leap_year = true;
		else if (year % 400 != 0)
			leap_year = false;
		else
			leap_year = true;

		
		if (leap_year)
		{
			if (day < 1 || day > 29)
				return 0;			
		}

		else
			if (day < 1 || day > 28)
				return 0;

		return 1;
	}


}


void display(const Inventory_item &record)
{
	std::cout << "Description: " << record.descript << "\n"
		<< "Stock number: " << record.stock << "\n"
		<< "Wholesale cost: $" << record.cost_wholesale << "\n"
		<< "Retail cost: $" << record.cost_retail << "\n"
		<< "Date added to inventory: " << record.date << "\n";
}


void display_record(std::fstream &file)
{
	std::cout << "\n\n";
		int file_size;
	int record_size = sizeof(Inventory_item);
	int record_num;
	file.clear();
	file.seekg(0, std::ios::end);
	file_size = file.tellg();
	record_num = file_size / record_size;

		std::cout << "Please input record number from 1 to "
		<< record_num << ", input -1 to show all records: ";
	int display_num;
	std::cin >> display_num;
	while (!(display_num == -1 || (display_num <= record_num && display_num > 0)))
	{
		std::cout << "Invalid input, please input record number from 1 to "
			<< record_num << ", input -1 to show all records: ";
		std::cin >> display_num;
	}
	std::cin.ignore(); 

					   	Inventory_item record; 
	switch (display_num)
	{
	case -1: 
		file.clear();
		file.seekg(0, std::ios::beg); 
		for (int i = 0; i<record_num; i++)
		{
			file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
			std::cout << "\nRecord #" << i + 1 << "\n";
			display(record);
		}
		std::cout << "\n\n";
		break;
	default: 
		file.clear();
		file.seekg((display_num - 1) * sizeof(record), std::ios::beg); 
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
		std::cout << "\nRecord #" << display_num << "\n";
		display(record);
		std::cout << "\n\n";
		break;
	}

		std::cout << "Display complete, press enter to continue...";
	std::cin.get();
	std::cout << "\n\n";

}


void modify_record(std::fstream &file)
{
		int file_size;
	int record_size = sizeof(Inventory_item);
	int record_num;
	file.clear();
	file.seekg(0, std::ios::end);
	file_size = file.tellg();
	record_num = file_size / record_size;

		std::cout << "Please input record number from 1 to "
		<< record_num << ": ";
	int modify_num;
	std::cin >> modify_num;
	while (!(modify_num <= record_num && modify_num > 0))
	{
		std::cout << "Invalid input, please input record number from 1 to "
			<< record_num << ": ";
		std::cin >> modify_num;
	}
	std::cin.ignore(); 

	 	Inventory_item record;
	
	std::cout << "Please enter item description (maximum character: 100): ";
	std::cin.getline(record.descript, DESCRIPTION);
	
	std::cout << "Please enter date added to inventory (in mm/dd/yyyy format): ";
	std::cin.getline(record.date, DATE_NUM);
	while (!date_check(record.date)) 
	{
		std::cout << "Invalid date format, please input the date again in mm/dd/yyyy format: ";
		std::cin.getline(record.date, DATE_NUM);
	}
	
	std::cout << "Please input stock number: ";
	std::cin >> record.stock;
	while (record.stock < 0)
	{
		std::cout << "Invalid input, please input number greater than zero: ";
		std::cin >> record.stock;
	}
	
	std::cout << "Please input wholesale cost: ";
	std::cin >> record.cost_wholesale;
	while (record.cost_wholesale < 0)
	{
		std::cout << "Invalid input, please input number greater than zero: ";
		std::cin >> record.cost_wholesale;
	}
	
	std::cout << "Please input retail cost: ";
	std::cin >> record.cost_retail;
	while (record.cost_retail < 0)
	{
		std::cout << "Invalid input, please input number greater than zero: ";
		std::cin >> record.cost_retail;
	}
	
	std::cin.ignore();

		file.seekp((modify_num - 1) * sizeof(record), std::ios::beg);
	file.write(reinterpret_cast<char *>(&record), sizeof(record));

		std::cout << "Modify complete, press enter to continue...";
	std::cin.get();
	std::cout << "\n\n";
}


void show_summary(std::fstream &file)
{
		double total_wholesale = 0, total_retail = 0;
	int total_quantity = 0;
	
		file.clear();
	file.seekg(0, std::ios::beg);
	Inventory_item record; 
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
	while (!file.eof()) 
	{
		
		total_quantity += record.stock;
		total_wholesale += record.stock * record.cost_wholesale;
		total_retail += record.stock * record.cost_retail;
		
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}
	
		std::cout << "\n\nTotal wholesale value: $" << total_wholesale << "\n"
	<< "Total retail value: $" << total_retail << "\n"
	<< "Total quantity: " << total_quantity << "\n\n";
	
}


void display_record_after_date(std::fstream &file)
{
		std::cout << "Please input a date in mm/dd/yyyy format, the program will display records that are added on and after this date: ";
	char date_display[DATE_NUM];
	std::cin.getline(date_display, DATE_NUM);
	while (!date_check(date_display)) 
	{
		std::cout << "Invalid date format, please input the date again in mm/dd/yyyy format: ";
		std::cin.getline(date_display, DATE_NUM);
	}
	int date_display_int = date_ch_to_int(date_display);

		file.clear();
	file.seekg(0, std::ios::beg);
	Inventory_item record;
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	int record_counter = 1; 
	while (!file.eof())
	{
		if (date_ch_to_int(record.date) >= date_display_int) 
		{
			std::cout << "\nRecord #" << record_counter << "\n";
			display(record);
		}
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
		record_counter++; 
	}
	
		std::cout << "Display complete, press enter to continue...";
	std::cin.get();
	std::cout << "\n\n";	
}



int date_ch_to_int(char *date_ch)
{
		char month_ch[2] = { date_ch[0], date_ch[1] };
	char day_ch[2] = { date_ch[3], date_ch[4] };
	char year_ch[4] = { date_ch[6], date_ch[7], date_ch[8], date_ch[9] };
	int month = atoi(month_ch);
	int day = atoi(day_ch);
	int year = atoi(year_ch);
	
		return year*10000 + month*100 + day;
}

}

15. Average number of words
{

#include <iostream>
#include <fstream>
#include <string>

int main()
{
		std::string line; 
	std::fstream file;
	file.open("D:\\text2.txt", std::ios::in);

		int num_word = 0; 
	int num_sentence = 0; 
	while (getline(file, line))
	{
		num_sentence++; 
						
		int num_space = 0;
		for (int i = 0; i<line.size(); i++)
		{
			if (line[i] == ' ')
				num_space++;
		}
		
		num_word += num_space + 1;
	}

		double average_word = num_word / num_sentence;

		std::cout << "The average words per sentence is: " << average_word << "\n";

	return 0;
}

}

16. Group Project: Customer Accounts++
{

#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <cctype>

const int NAME_SIZE = 51;
const int ADDRESS_SIZE = 101;
const int CITY_ZIP_SIZE = 101;
const int PHONE_SIZE = 20;
const int DATE_SIZE = 11;
const int KEYWORD_SIZE = 101;

struct Account
{
	bool is_delete; 
	int account_number; 
	char name[NAME_SIZE]; 
	char address[ADDRESS_SIZE]; 
	char city_zip[CITY_ZIP_SIZE]; 
	char phone[PHONE_SIZE]; 
	char date[DATE_SIZE]; 
	double balance; 
};

int database_size(std::fstream &file, std::vector<int> deleted_position);
void fill_deleted_position(std::fstream &file, std::vector<int> &deleted_position);
void show_menu(char &choice, int num_record);
void add_account(std::fstream &file, std::vector<int> &deleted_position);
void record_input(Account &record);
bool date_check(char *date);
void display(const Account &record);
int search(std::fstream &file);
void display_account(std::fstream &file);
void delete_account(std::fstream &file, std::vector<int> &deleted_position);
void modify_account(std::fstream &file);
int date_ch_to_int(char *date_ch);
void display_overdue(std::fstream &file);
void clear_deleted(std::fstream &file, std::vector<int> &deleted_position);

int main()
{
	
	std::fstream file;
	
	
	
	
	
	
	
	
	
	file.open("D:\\customer account database.dat", std::ios::out | std::ios::in | std::ios::binary);

		std::vector<int> deleted_position;
	
	fill_deleted_position(file, deleted_position);

		char choice; 
	do
	{
		show_menu(choice, database_size(file, deleted_position));
		switch (choice)
		{
		case '1': 
			add_account(file, deleted_position);
			break;
		case '2': 
			display_account(file);
			break;
		case '3': 
			delete_account(file, deleted_position);
			break;
		case '4': 
			modify_account(file);
			break;
		case '5': 
			display_overdue(file);
			break;
		case '6': 
			clear_deleted(file, deleted_position);
			break;
		case '7':
			break;
		}
	} while (choice != '7');

	std::cout << "Thanks for using account management program!\n";

	return 0;
}


int database_size(std::fstream &file, std::vector<int> deleted_position)
{
	
	file.clear();
	file.seekg(0, std::ios::end);

	
	int size_file = file.tellg();
	int size_record = sizeof(Account);
	int num_deleted = deleted_position.size();

	return size_file / size_record - num_deleted;
}


void show_menu(char &choice, int num_record)
{
	std::cout << "\nCustomer Accounts Management System\n"
		<< "Current record in database: " << num_record << "\n"
		<< "1) Add new customer account\n"
		<< "2) Display account\n"
		<< "3) Delete account\n"
		<< "4) Modify account\n"
		<< "5) Display overdue account\n"
		<< "6) Clear all deleted account\n"
		<< "7) Quit\n";

	std::cin >> choice;
	while (choice < 49 || choice > 55)
	{
		std::cout << "Please input 1 ~ 7: ";
		std::cin >> choice;
	}
	std::cin.ignore(); 
}


void add_account(std::fstream &file, std::vector<int> &deleted_position)
{
	Account record; 
	record.is_delete = false; 

							  							  
	int account_number = time(0) - 555555555555; 
	record.account_number = account_number;

		record_input(record);

		
	
	if (deleted_position.size() == 0)
	{

		
		file.clear();
		file.seekp(0, std::ios::end);
		
		file.write(reinterpret_cast<char *>(&record), sizeof(record));
	}
	else
	{
		
		file.clear();
		int position = deleted_position[deleted_position.size() - 1];
		file.seekp(position * sizeof(record), std::ios::beg);
		
		file.write(reinterpret_cast<char *>(&record), sizeof(record));
		
		deleted_position.pop_back();
	}


		std::cout << "Account add successfully, please press enter to continue...";
	std::cin.get();

}


void record_input(Account &record)
{
		std::cout << "Please input following account information\n";
	
	std::cout << "Name: ";
	std::cin.getline(record.name, NAME_SIZE);
	
	std::cout << "Address: ";
	std::cin.getline(record.address, ADDRESS_SIZE);
	
	std::cout << "City, state and zip code: ";
	std::cin.getline(record.city_zip, CITY_ZIP_SIZE);
	
	std::cout << "Phone number: ";
	std::cin.getline(record.phone, PHONE_SIZE);
	
	std::cout << "Date of last payment (format: mm/dd/yyyy):  ";
	std::cin.getline(record.date, DATE_SIZE);
	while (!date_check(record.date)) 
	{
		std::cout << "Invalid date format, please input the date again in mm/dd/yyyy format: ";
		std::cin.getline(record.date, DATE_SIZE);
	}
	
	std::cout << "Account balance: ";
	std::cin >> record.balance;
	std::cin.ignore(); 

}


bool date_check(char *date)
{
		if (strlen(date) != 10)
		return 0;

		if (date[2] != '/' && date[5] != '/')
		return 0;

		char month_ch[2] = { date[0], date[1] };
	char day_ch[2] = { date[3], date[4] };
	char year_ch[4] = { date[6], date[7], date[8], date[9] };
	int month = atoi(month_ch);
	int day = atoi(day_ch);
	int year = atoi(year_ch);

		
	if (month > 12 || month < 1)
		return 0;
	
	switch (month)
	{
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		if (day < 1 || day > 31)
			return 0;
		else
			return 1;
		break;
	case 4:
	case 6:
	case 9:
	case 11:
		if (day < 1 || day > 30)
			return 0;
		else
			return 1;
		break;
	case 2:
		
		bool leap_year; 
		if (year % 4 != 0)
			leap_year = false;
		else if (year % 100 != 0)
			leap_year = true;
		else if (year % 400 != 0)
			leap_year = false;
		else
			leap_year = true;

		
		if (leap_year)
		{
			if (day < 1 || day > 29)
				return 0;
		}

		else
			if (day < 1 || day > 28)
				return 0;

		return 1;
	}


}


void display(const Account &record)
{
	std::cout << std::setprecision(2) << std::fixed;
	std::cout << "Account number: " << record.account_number << "\n";
	std::cout << "Name: " << record.name << "\n";
	std::cout << "Address: " << record.address << "\n";
	std::cout << "City, state and zip code: " << record.city_zip << "\n";
	std::cout << "Phone: " << record.phone << "\n";
	std::cout << "Date of last payment: " << record.date << "\n";
	std::cout << "Account balance: $" << record.balance << "\n";
}


int search(std::fstream &file)
{
	

	
	
	
	
	
	
	
	
	
	
	

		std::cout << "\nPlease select one type of keyword to search:\n"
		<< "1) Account number\n"
		<< "2) Name\n"
		<< "3) Address\n"
		<< "4) City, state and zip code\n"
		<< "5) Phone\n"
		<< "6) Date of last payment\n"
		<< "7) Balance\n";
	char selection; 
	std::cin >> selection;
	while (selection < 49 || selection > 55)
	{
		std::cout << "Invalid input, please select from 1 ~ 6: ";
		std::cin >> selection;
	}
	std::cin.ignore(); 

					   	std::string keyword;
	std::cout << "Please input the keyword to search: ";
	getline(std::cin, keyword);

		std::vector<int> match_position; 
	Account record; 
					
	file.clear();
	file.seekg(0, std::ios::beg);
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	
	switch (selection)
	{
	case '1': 
		while (!file.eof())
		{
			
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
				continue; 
			}

			
			
			std::string account_number_string = std::to_string(record.account_number);
			
			if (account_number_string.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1; 
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '2': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string name(record.name);
			
			if (name.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '3': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string address(record.address);
			
			if (address.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '4': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string city_zip(record.city_zip);
			
			if (city_zip.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '5': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string phone(record.phone);
			
			if (phone.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '6': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string date(record.date);
			
			if (date.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '7': 
		while (!file.eof())
		{
			
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
				continue; 
			}

			
			
			std::string balance_string = std::to_string(record.balance);
			
			if (balance_string.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1; 
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;
	}

		std::cout << "\nSearch result:\n";
	if (match_position.size() == 0) 
		return -1;
	else
	{
		
		for (int i = 0; i<match_position.size(); i++)
		{
			std::cout << "\n\nResult " << i + 1 << "\n"; 
														 
			file.clear();
			file.seekg(match_position[i] * sizeof(record), std::ios::beg);
			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
			
			switch (selection)
			{
			case '1':
				std::cout << "Account number: " << record.account_number << "\n";
				break;
			case '2':
				std::cout << "Name: " << record.name << "\n";
				break;
			case '3':
				std::cout << "Address: " << record.address << "\n";
				break;
			case '4':
				std::cout << "City, state & zip code: " << record.city_zip << "\n";
				break;
			case '5':
				std::cout << "Phone: " << record.phone << "\n";
				break;
			case '6':
				std::cout << "Date of last payment: " << record.date << "\n";
				break;
			case '7':
				std::cout << "Account balance: " << record.balance << "\n";
				break;
			}
		}
	}

	
	int search_choice;
	std::cout << "Please input the number of your desired result: ";
	std::cin >> search_choice;
	while (search_choice < 1 || search_choice > match_position.size())
	{
		std::cout << "Invalid input, please input again: ";
		std::cin >> search_choice;
	}
	std::cin.ignore(); 

					   
	return match_position[search_choice - 1];

}





void display_account(std::fstream &file)
{
		char choice_display; 
	std::cout << "Please select how you would display account:\n"
		<< "1) Display an account by searching keyword\n"
		<< "2) Display all account\n";
	std::cin >> choice_display;
	while (choice_display != '1' && choice_display != '2')
	{
		std::cout << "Please input 1 or 2: ";
		std::cin >> choice_display;
	}
	std::cin.ignore(); 

					   	Account record; 

					
	if (choice_display == '2')
	{
		int counter = 0;
		
		file.clear();
		file.seekg(0, std::ios::beg);
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
		
		while (!file.eof())
		{
			if (!record.is_delete) 
			{
				counter++; 
				std::cout << "\n\nRecord " << counter << "\n";
				display(record);
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}

		
		std::cout << "Display completed, please press enter to continue...";
		std::cin.get();

		return;
	}

	
	
	int display_position; 
	display_position = search(file);
	
	if (display_position == -1)
	{
		std::cout << "No record found, please press enter to continue...";
		std::cin.get();
	}
	else
	{
		
		file.clear();
		file.seekg(display_position * sizeof(record), std::ios::beg);
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
		std::cout << "\n";
		display(record);

		
		std::cout << "Display completed, please press enter to continue...";
		std::cin.get();
	}


}


void delete_account(std::fstream &file, std::vector<int> &deleted_position)
{
		int position;
	std::cout << "You have to search for the account to delete.\n";
	position = search(file);

	
	if (position == -1)
	{
		std::cout << "No record found, please press enter to continue...";
		std::cin.get();
	}

	else
	{
				Account record_delete;
		
		file.clear();
		file.seekp(position * sizeof(record_delete), std::ios::beg);
		file.read(reinterpret_cast<char *>(&record_delete), sizeof(record_delete));
		
		std::cout << "\nThe account you choose is:\n";
		display(record_delete);
		std::cout << "\nAre you sure you want to delete this account? (Y/N)";
		char choice_delete;
		std::cin >> choice_delete;
		while (toupper(choice_delete) != 'Y' && toupper(choice_delete) != 'N')
		{
			std::cout << "Invalid input, please input again (Y/N) ";
			std::cin >> choice_delete;
		}
		std::cin.ignore(); 

		if (toupper(choice_delete) == 'N')
		{
			std::cout << "Press enter to go back to main menu...";
			std::cin.get();
			return;
		}

				bool is_delete = true;
		file.clear();
		file.seekp(position * sizeof(record_delete), std::ios::beg);
		file.write(reinterpret_cast<char *>(&is_delete), sizeof(is_delete));

				deleted_position.push_back(position);
		std::cout << "Deletion complete, press enter to continue...";
		std::cin.get();
	}


}


void fill_deleted_position(std::fstream &file, std::vector<int> &deleted_position)
{
		
	Account record;
	int position;

	
	file.clear();
	file.seekg(0, std::ios::beg);
	file.read(reinterpret_cast<char *>(&record), sizeof(record));

	while (!file.eof())
	{
		
		if (record.is_delete == true)
		{
			position = file.tellg() / sizeof(record) - 1;
			deleted_position.push_back(position);
		}

		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));

	}
}





void modify_account(std::fstream &file)
{
		std::cout << "You have to search a record to modify.\n";
	int position_modify;
	position_modify = search(file);

	
	if (position_modify == -1)
	{
		std::cout << "No record found, please press enter to continue...";
		std::cin.get();
		return;
	}

		Account record;
	
	file.clear();
	file.seekg(position_modify * sizeof(record), std::ios::beg);
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	
	record_input(record);

		file.clear();
	file.seekp(position_modify * sizeof(record), std::ios::beg);
	file.write(reinterpret_cast<char *>(&record), sizeof(record));

		std::cout << "Modification complete, press enter to continue...";
	std::cin.get();

}



int date_ch_to_int(char *date_ch)
{
		char month_ch[2] = { date_ch[0], date_ch[1] };
	char day_ch[2] = { date_ch[3], date_ch[4] };
	char year_ch[4] = { date_ch[6], date_ch[7], date_ch[8], date_ch[9] };
	int month = atoi(month_ch);
	int day = atoi(day_ch);
	int year = atoi(year_ch);

		return year * 10000 + month * 100 + day;
}





void display_overdue(std::fstream &file)
{
		std::cout << "Please input a date in mm/dd/yyyy format, the program will display all records that the last payment day is prior to the inputed date: ";
	char due_date_ch[DATE_SIZE];
	std::cin.getline(due_date_ch, DATE_SIZE);
	while (!date_check(due_date_ch))
	{
		std::cout << "Invalid date format, please input in mm/dd/yyyy: ";
		std::cin.getline(due_date_ch, DATE_SIZE);
	}

	int due_date = date_ch_to_int(due_date_ch); 

													file.clear();
	file.seekg(0, std::ios::beg);

		Account record;
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	int counter = 1;
	while (!file.eof())
	{
		if (date_ch_to_int(record.date) <= due_date)
		{
			std::cout << "\nRecord " << counter++ << ":\n";
			display(record);
		}
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}
	std::cout << "\n";

}







void clear_deleted(std::fstream &file, std::vector<int> &deleted_position)
{
		std::vector <Account> accounts;

		
	file.clear();
	file.seekg(0, std::ios::beg);
	
	Account record;
	int counter = 0;
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	
	while (!file.eof())
	{
		if (record.is_delete == false)
			accounts.push_back(record);
		else
			counter++;
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}

		file.close();
	file.open("D:\\customer account database.dat", std::ios::out | std::ios::binary);
	for (int i = 0; i<accounts.size(); i++)
		file.write(reinterpret_cast<char *>(&accounts[i]), sizeof(accounts[i]));

		file.close();
	file.open("D:\\customer account database.dat", std::ios::in | std::ios::out | std::ios::binary);
	deleted_position.clear();

		std::cout << "Process completed. " << counter << " deleted accounts are cleared, press enter tp continue...";
	std::cin.get();


}



}









