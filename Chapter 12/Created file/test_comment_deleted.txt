
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <cctype>

const int NAME_SIZE = 51;
const int ADDRESS_SIZE = 101;
const int CITY_ZIP_SIZE = 101;
const int PHONE_SIZE = 20;
const int DATE_SIZE = 11;
const int KEYWORD_SIZE = 101;

struct Account
{
	bool is_delete; 
	int account_number; 
	char name[NAME_SIZE]; 
	char address[ADDRESS_SIZE]; 
	char city_zip[CITY_ZIP_SIZE]; 
	char phone[PHONE_SIZE]; 
	char date[DATE_SIZE]; 
	double balance; 
};

int database_size(std::fstream &file, std::vector<int> deleted_position);
void fill_deleted_position(std::fstream &file, std::vector<int> &deleted_position);
void show_menu(char &choice, int num_record);
void add_account(std::fstream &file, std::vector<int> &deleted_position);
void record_input(Account &record);
bool date_check(char *date);
void display(const Account &record);
int search(std::fstream &file);
void display_account(std::fstream &file);
void delete_account(std::fstream &file, std::vector<int> &deleted_position);
void modify_account(std::fstream &file);
int date_ch_to_int(char *date_ch);
void display_overdue(std::fstream &file);
void clear_deleted(std::fstream &file, std::vector<int> &deleted_position);

int main()
{
	
	std::fstream file;
	
	
	
	
	
	
	
	
	
	file.open("D:\\customer account database.dat", std::ios::out | std::ios::in | std::ios::binary);

		std::vector<int> deleted_position;
	
	fill_deleted_position(file, deleted_position);

		char choice; 
	do
	{
		show_menu(choice, database_size(file, deleted_position));
		switch (choice)
		{
		case '1': 
			add_account(file, deleted_position);
			break;
		case '2': 
			display_account(file);
			break;
		case '3': 
			delete_account(file, deleted_position);
			break;
		case '4': 
			modify_account(file);
			break;
		case '5': 
			display_overdue(file);
			break;
		case '6': 
			clear_deleted(file, deleted_position);
			break;
		case '7':
			break;
		}
	} while (choice != '7');

	std::cout << "Thanks for using account management program!\n";

	return 0;
}


int database_size(std::fstream &file, std::vector<int> deleted_position)
{
	
	file.clear();
	file.seekg(0, std::ios::end);

	
	int size_file = file.tellg();
	int size_record = sizeof(Account);
	int num_deleted = deleted_position.size();

	return size_file / size_record - num_deleted;
}


void show_menu(char &choice, int num_record)
{
	std::cout << "\nCustomer Accounts Management System\n"
		<< "Current record in database: " << num_record << "\n"
		<< "1) Add new customer account\n"
		<< "2) Display account\n"
		<< "3) Delete account\n"
		<< "4) Modify account\n"
		<< "5) Display overdue account\n"
		<< "6) Clear all deleted account\n"
		<< "7) Quit\n";

	std::cin >> choice;
	while (choice < 49 || choice > 55)
	{
		std::cout << "Please input 1 ~ 7: ";
		std::cin >> choice;
	}
	std::cin.ignore(); 
}


void add_account(std::fstream &file, std::vector<int> &deleted_position)
{
	Account record; 
	record.is_delete = false; 

							  							  
	int account_number = time(0) - 555555555555; 
	record.account_number = account_number;

		record_input(record);

		
	
	if (deleted_position.size() == 0)
	{

		
		file.clear();
		file.seekp(0, std::ios::end);
		
		file.write(reinterpret_cast<char *>(&record), sizeof(record));
	}
	else
	{
		
		file.clear();
		int position = deleted_position[deleted_position.size() - 1];
		file.seekp(position * sizeof(record), std::ios::beg);
		
		file.write(reinterpret_cast<char *>(&record), sizeof(record));
		
		deleted_position.pop_back();
	}


		std::cout << "Account add successfully, please press enter to continue...";
	std::cin.get();

}


void record_input(Account &record)
{
		std::cout << "Please input following account information\n";
	
	std::cout << "Name: ";
	std::cin.getline(record.name, NAME_SIZE);
	
	std::cout << "Address: ";
	std::cin.getline(record.address, ADDRESS_SIZE);
	
	std::cout << "City, state and zip code: ";
	std::cin.getline(record.city_zip, CITY_ZIP_SIZE);
	
	std::cout << "Phone number: ";
	std::cin.getline(record.phone, PHONE_SIZE);
	
	std::cout << "Date of last payment (format: mm/dd/yyyy):  ";
	std::cin.getline(record.date, DATE_SIZE);
	while (!date_check(record.date)) 
	{
		std::cout << "Invalid date format, please input the date again in mm/dd/yyyy format: ";
		std::cin.getline(record.date, DATE_SIZE);
	}
	
	std::cout << "Account balance: ";
	std::cin >> record.balance;
	std::cin.ignore(); 

}


bool date_check(char *date)
{
		if (strlen(date) != 10)
		return 0;

		if (date[2] != '/' && date[5] != '/')
		return 0;

		char month_ch[2] = { date[0], date[1] };
	char day_ch[2] = { date[3], date[4] };
	char year_ch[4] = { date[6], date[7], date[8], date[9] };
	int month = atoi(month_ch);
	int day = atoi(day_ch);
	int year = atoi(year_ch);

		
	if (month > 12 || month < 1)
		return 0;
	
	switch (month)
	{
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		if (day < 1 || day > 31)
			return 0;
		else
			return 1;
		break;
	case 4:
	case 6:
	case 9:
	case 11:
		if (day < 1 || day > 30)
			return 0;
		else
			return 1;
		break;
	case 2:
		
		bool leap_year; 
		if (year % 4 != 0)
			leap_year = false;
		else if (year % 100 != 0)
			leap_year = true;
		else if (year % 400 != 0)
			leap_year = false;
		else
			leap_year = true;

		
		if (leap_year)
		{
			if (day < 1 || day > 29)
				return 0;
		}

		else
			if (day < 1 || day > 28)
				return 0;

		return 1;
	}


}


void display(const Account &record)
{
	std::cout << std::setprecision(2) << std::fixed;
	std::cout << "Account number: " << record.account_number << "\n";
	std::cout << "Name: " << record.name << "\n";
	std::cout << "Address: " << record.address << "\n";
	std::cout << "City, state and zip code: " << record.city_zip << "\n";
	std::cout << "Phone: " << record.phone << "\n";
	std::cout << "Date of last payment: " << record.date << "\n";
	std::cout << "Account balance: $" << record.balance << "\n";
}


int search(std::fstream &file)
{
	

	
	
	
	
	
	
	
	
	
	
	

		std::cout << "\nPlease select one type of keyword to search:\n"
		<< "1) Account number\n"
		<< "2) Name\n"
		<< "3) Address\n"
		<< "4) City, state and zip code\n"
		<< "5) Phone\n"
		<< "6) Date of last payment\n"
		<< "7) Balance\n";
	char selection; 
	std::cin >> selection;
	while (selection < 49 || selection > 55)
	{
		std::cout << "Invalid input, please select from 1 ~ 6: ";
		std::cin >> selection;
	}
	std::cin.ignore(); 

					   	std::string keyword;
	std::cout << "Please input the keyword to search: ";
	getline(std::cin, keyword);

		std::vector<int> match_position; 
	Account record; 
					
	file.clear();
	file.seekg(0, std::ios::beg);
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	
	switch (selection)
	{
	case '1': 
		while (!file.eof())
		{
			
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
				continue; 
			}

			
			
			std::string account_number_string = std::to_string(record.account_number);
			
			if (account_number_string.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1; 
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '2': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string name(record.name);
			
			if (name.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '3': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string address(record.address);
			
			if (address.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '4': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string city_zip(record.city_zip);
			
			if (city_zip.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '5': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string phone(record.phone);
			
			if (phone.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '6': 
		while (!file.eof())
		{
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record));
				continue;
			}

			
			std::string date(record.date);
			
			if (date.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1;
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;

	case '7': 
		while (!file.eof())
		{
			
			if (record.is_delete == true)
			{
				file.read(reinterpret_cast<char *>(&record), sizeof(record)); 
				continue; 
			}

			
			
			std::string balance_string = std::to_string(record.balance);
			
			if (balance_string.find(keyword) != -1) 
			{
				int position = file.tellg() / sizeof(record) - 1; 
				match_position.push_back(position); 
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}
		break;
	}

		std::cout << "\nSearch result:\n";
	if (match_position.size() == 0) 
		return -1;
	else
	{
		
		for (int i = 0; i<match_position.size(); i++)
		{
			std::cout << "\n\nResult " << i + 1 << "\n"; 
														 
			file.clear();
			file.seekg(match_position[i] * sizeof(record), std::ios::beg);
			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
			
			switch (selection)
			{
			case '1':
				std::cout << "Account number: " << record.account_number << "\n";
				break;
			case '2':
				std::cout << "Name: " << record.name << "\n";
				break;
			case '3':
				std::cout << "Address: " << record.address << "\n";
				break;
			case '4':
				std::cout << "City, state & zip code: " << record.city_zip << "\n";
				break;
			case '5':
				std::cout << "Phone: " << record.phone << "\n";
				break;
			case '6':
				std::cout << "Date of last payment: " << record.date << "\n";
				break;
			case '7':
				std::cout << "Account balance: " << record.balance << "\n";
				break;
			}
		}
	}

	
	int search_choice;
	std::cout << "Please input the number of your desired result: ";
	std::cin >> search_choice;
	while (search_choice < 1 || search_choice > match_position.size())
	{
		std::cout << "Invalid input, please input again: ";
		std::cin >> search_choice;
	}
	std::cin.ignore(); 

					   
	return match_position[search_choice - 1];

}





void display_account(std::fstream &file)
{
		char choice_display; 
	std::cout << "Please select how you would display account:\n"
		<< "1) Display an account by searching keyword\n"
		<< "2) Display all account\n";
	std::cin >> choice_display;
	while (choice_display != '1' && choice_display != '2')
	{
		std::cout << "Please input 1 or 2: ";
		std::cin >> choice_display;
	}
	std::cin.ignore(); 

					   	Account record; 

					
	if (choice_display == '2')
	{
		int counter = 0;
		
		file.clear();
		file.seekg(0, std::ios::beg);
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
		
		while (!file.eof())
		{
			if (!record.is_delete) 
			{
				counter++; 
				std::cout << "\n\nRecord " << counter << "\n";
				display(record);
			}

			
			file.read(reinterpret_cast<char *>(&record), sizeof(record));
		}

		
		std::cout << "Display completed, please press enter to continue...";
		std::cin.get();

		return;
	}

	
	
	int display_position; 
	display_position = search(file);
	
	if (display_position == -1)
	{
		std::cout << "No record found, please press enter to continue...";
		std::cin.get();
	}
	else
	{
		
		file.clear();
		file.seekg(display_position * sizeof(record), std::ios::beg);
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
		std::cout << "\n";
		display(record);

		
		std::cout << "Display completed, please press enter to continue...";
		std::cin.get();
	}


}


void delete_account(std::fstream &file, std::vector<int> &deleted_position)
{
		int position;
	std::cout << "You have to search for the account to delete.\n";
	position = search(file);

	
	if (position == -1)
	{
		std::cout << "No record found, please press enter to continue...";
		std::cin.get();
	}

	else
	{
				Account record_delete;
		
		file.clear();
		file.seekp(position * sizeof(record_delete), std::ios::beg);
		file.read(reinterpret_cast<char *>(&record_delete), sizeof(record_delete));
		
		std::cout << "\nThe account you choose is:\n";
		display(record_delete);
		std::cout << "\nAre you sure you want to delete this account? (Y/N)";
		char choice_delete;
		std::cin >> choice_delete;
		while (toupper(choice_delete) != 'Y' && toupper(choice_delete) != 'N')
		{
			std::cout << "Invalid input, please input again (Y/N) ";
			std::cin >> choice_delete;
		}
		std::cin.ignore(); 

		if (toupper(choice_delete) == 'N')
		{
			std::cout << "Press enter to go back to main menu...";
			std::cin.get();
			return;
		}

				bool is_delete = true;
		file.clear();
		file.seekp(position * sizeof(record_delete), std::ios::beg);
		file.write(reinterpret_cast<char *>(&is_delete), sizeof(is_delete));

				deleted_position.push_back(position);
		std::cout << "Deletion complete, press enter to continue...";
		std::cin.get();
	}


}


void fill_deleted_position(std::fstream &file, std::vector<int> &deleted_position)
{
		
	Account record;
	int position;

	
	file.clear();
	file.seekg(0, std::ios::beg);
	file.read(reinterpret_cast<char *>(&record), sizeof(record));

	while (!file.eof())
	{
		
		if (record.is_delete == true)
		{
			position = file.tellg() / sizeof(record) - 1;
			deleted_position.push_back(position);
		}

		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));

	}
}





void modify_account(std::fstream &file)
{
		std::cout << "You have to search a record to modify.\n";
	int position_modify;
	position_modify = search(file);

	
	if (position_modify == -1)
	{
		std::cout << "No record found, please press enter to continue...";
		std::cin.get();
		return;
	}

		Account record;
	
	file.clear();
	file.seekg(position_modify * sizeof(record), std::ios::beg);
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	
	record_input(record);

		file.clear();
	file.seekp(position_modify * sizeof(record), std::ios::beg);
	file.write(reinterpret_cast<char *>(&record), sizeof(record));

		std::cout << "Modification complete, press enter to continue...";
	std::cin.get();

}



int date_ch_to_int(char *date_ch)
{
		char month_ch[2] = { date_ch[0], date_ch[1] };
	char day_ch[2] = { date_ch[3], date_ch[4] };
	char year_ch[4] = { date_ch[6], date_ch[7], date_ch[8], date_ch[9] };
	int month = atoi(month_ch);
	int day = atoi(day_ch);
	int year = atoi(year_ch);

		return year * 10000 + month * 100 + day;
}





void display_overdue(std::fstream &file)
{
		std::cout << "Please input a date in mm/dd/yyyy format, the program will display all records that the last payment day is prior to the inputed date: ";
	char due_date_ch[DATE_SIZE];
	std::cin.getline(due_date_ch, DATE_SIZE);
	while (!date_check(due_date_ch))
	{
		std::cout << "Invalid date format, please input in mm/dd/yyyy: ";
		std::cin.getline(due_date_ch, DATE_SIZE);
	}

	int due_date = date_ch_to_int(due_date_ch); 

													file.clear();
	file.seekg(0, std::ios::beg);

		Account record;
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	int counter = 1;
	while (!file.eof())
	{
		if (date_ch_to_int(record.date) <= due_date)
		{
			std::cout << "\nRecord " << counter++ << ":\n";
			display(record);
		}
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}
	std::cout << "\n";

}







void clear_deleted(std::fstream &file, std::vector<int> &deleted_position)
{
		std::vector <Account> accounts;

		
	file.clear();
	file.seekg(0, std::ios::beg);
	
	Account record;
	int counter = 0;
	
	file.read(reinterpret_cast<char *>(&record), sizeof(record));
	
	while (!file.eof())
	{
		if (record.is_delete == false)
			accounts.push_back(record);
		else
			counter++;
		
		file.read(reinterpret_cast<char *>(&record), sizeof(record));
	}

		file.close();
	file.open("D:\\customer account database.dat", std::ios::out | std::ios::binary);
	for (int i = 0; i<accounts.size(); i++)
		file.write(reinterpret_cast<char *>(&accounts[i]), sizeof(accounts[i]));

		file.close();
	file.open("D:\\customer account database.dat", std::ios::in | std::ios::out | std::ios::binary);
	deleted_position.clear();

		std::cout << "Process completed. " << counter << " deleted accounts are cleared, press enter tp continue...";
	std::cin.get();


}

